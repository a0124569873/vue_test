<?php
/**
 * Created by PhpStorm.
 * User: WangSF
 * Date: 2018/3/28
 * Time: 17:40
 */

namespace app\index\validate;


use app\index\traits\ValidatorRules;
use think\Validate;

class Port extends Validate
{
    use ValidatorRules;

    protected $message = [];

    protected $checkingFieldName = null;

    protected $checkingFieldTitle = null;

    protected $field = [
        'server_ips' => '源站IP',
        'server_port' => '源站端口',
        'proxy_ips' => '转发IP',
        'proxy_port' => '转发端口',
        'line' => '实例线路',
        'id' => '编号',
        'protocol' => '转发协议',
        'ids' => '站点ID',
        'ipWhitelist' => 'IP白名单',
        'ipBlacklist' => 'IP黑名单',
        'domain' => '域名',
        'cname' => 'CNAME',
    ];

    protected $rule = [
        'server_ips' => 'require|min:1|serverIps',
        'server_port' => 'require|port|notIn:80,443',
        'id' => 'require|string|min:1',
        'proxy_port' => 'require|port|notIn:80,443',
        'proxy_ips' => 'require|array|proxyIps',
        'line' => 'require|min:3',
        'protocol' => 'require|in:TCP,UDP',
        'ids' => 'require|array|min:1',
        'ipWhitelist' => 'ips',
        'ipBlacklist' => 'ips',
        'domain' => 'require|domain',
        'cname' => 'require|domain',
    ];

    protected $scene = [
        'add_port' => ['server_ips', 'server_port', 'proxy_port', 'protocol', 'proxy_ips'],
        'del_port' => ['id'],
        'update_conf' => ['server_ips', 'server_port'],
        'update_linkup' => ['proxy_ips', 'protocol'],
        'bundle_delete' => ['ids'],
        'update' => ['server_ips', 'server_port', 'proxy_port', 'protocol', 'proxy_ips'],
        'white_black_list' => ['ipWhitelist', 'ipBlacklist'],
        'ip_black_list' => ['ipBlacklist'],
        'ip_white_list' => ['ipWhitelist'],
        'generate_cname' => 'domain',
        'cname_active' => ['domain', 'cname']
    ];

    // 验证端口
    protected function port($value, $rule, $data)
    {
        return is_numeric($value) && floor($value) == $value && $value >= 0 && $value <= 65535 ? true : 'Port非法';
    }

    protected function proxyIps($proxyIps)
    {
        if (empty($proxyIps)) {
            return '转发IP必须是数组，且最少有一项！';
        }

        foreach ($proxyIps as $proxyIp) {
            if (!isset($proxyIp['line']) || empty($proxyIp['ip'] || empty($proxyIp['ddos_id']))) {
                return '转发IP规则错误';
            }

            if (!Validate::ip($proxyIp['ip'], 'ipv4')) {
                return '转发IP不是合法的IP';
            }
        }

        return true;
    }

    protected function serverIps($serverIps)
    {
        $serverIps = explode(',', $serverIps);
        foreach ($serverIps as $serverIp) {
            if (!Validate::ip($serverIp, 'ipv4')) {
                return '源站IP不是合法的IP';
            }
        }

        return true;
    }

    public function exist()
    {
        $input = input();
        if (!isset($input[$this->checkingFieldName])) {
            return $this->checkingFieldTitle . "是必须的！";
        }

        return true;
    }


    // 重写TP Validate,获得当前正在校验的字段和别名
    protected function checkItem($field, $value, $rules, $data, $title = '', $msg = [])
    {
        // 记录当前正在校验的字段
        $this->checkingFieldName = $field;
        $this->checkingFieldTitle = $title;

        return parent::checkItem($field, $value, $rules, $data, $title, $msg); // TODO: Change the autogenerated stub
    }

}